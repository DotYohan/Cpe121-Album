/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cpe121.briones.finalproject;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yuanb
 */
public class PayLoan extends javax.swing.JFrame {

    private String Balance = "";
    private double douBal = 00;
    private String loan = "";
    private double douloan = 00;
    private String accountNumb = "";
    private double newBal = 0;
    private String LoanId = "";
    private String AccName = "";
    String user = "";
    DefaultTableModel model;
    LocalDateTime now = LocalDateTime.now();
    String formatted = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

    public PayLoan() {
        initComponents();
    }

    public PayLoan(String Acc, String Name) {
        initComponents();
        model = (DefaultTableModel) TableLoan.getModel();
        this.accountNumb = Acc;
        this.AccName = Name;
        model.setRowCount(0);
        Tables();
        getBalance();
    }

    public void Tables() {
        DB_connection.init();
        Connection c = DB_connection.getConnection();
        user = "user_" + accountNumb;
        try {
            PreparedStatement ps = c.prepareStatement("SELECT id, Dates, accountloan, remarks FROM " + user + " WHERE remarks = 'unpaid'");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString("id"), rs.getString("Dates"), rs.getString("accountloan"), rs.getString("remarks")});

            }
        } catch (SQLException ex) {
            System.out.println("");
        }
    }

    public void getBalance() {
        DB_connection.init();
        Connection c = DB_connection.getConnection();
        try {
            PreparedStatement ps = c.prepareStatement("SELECT * FROM bank.accounts where accountnumber = '" + accountNumb + "';");
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                Balance = rs.getString("Balance");
            }
        } catch (SQLException ex) {
            System.out.println("");
        }
    }

    private void Payment() {
        DB_connection.init();
        try {
            user = "user_" + accountNumb;
            Connection c = DB_connection.getConnection();
            model.setRowCount(0);
            PreparedStatement ps = c.prepareStatement("UPDATE " + user + " set remarks = 'Paid' WHERE id = " + LoanId + ";");
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
            } else {
                JOptionPane.showMessageDialog(null, "No record found.");
            }
            ps = c.prepareStatement("UPDATE accounts set Balance = ? WHERE accountnumber = ?;");
            ps.setDouble(1, newBal);
            ps.setString(2, accountNumb);
            rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
            } else {
                JOptionPane.showMessageDialog(null, "No record found.");
            }
            ps = c.prepareStatement("Insert into " + user + " (Dates, accountnumber, accountname, accountbalance) values('"
                    + formatted + "','" + accountNumb + "','" + AccName + "'," + newBal + ")");
            ps.execute();
            JOptionPane.showMessageDialog(null, "Transaction Successfully Saved");

        } catch (SQLException ex) {
            ex.printStackTrace(); // for debugging
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableLoan = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        AmountField = new javax.swing.JTextField();
        PayMode = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        LoanIds = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("PayLoan");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 200, -1));

        TableLoan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "LoanID", "Date", "Amount", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableLoan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableLoanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableLoan);
        if (TableLoan.getColumnModel().getColumnCount() > 0) {
            TableLoan.getColumnModel().getColumn(0).setResizable(false);
            TableLoan.getColumnModel().getColumn(1).setResizable(false);
            TableLoan.getColumnModel().getColumn(2).setResizable(false);
            TableLoan.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 360, 200));

        jLabel2.setText("Amount");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));
        getContentPane().add(AmountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 290, -1));

        PayMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Balance", "Gcash", "PayMaya" }));
        PayMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayModeActionPerformed(evt);
            }
        });
        getContentPane().add(PayMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 430, -1, -1));

        jButton1.setText("Pay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));

        jLabel3.setText("LoanID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));
        getContentPane().add(LoanIds, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, 290, -1));

        jLabel4.setText("Double click on the LoanID for seamless transaction");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jButton2.setText("Home");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PayModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PayModeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        String selectedItem = PayMode.getSelectedItem().toString();
        douBal = Double.parseDouble(Balance);
        douloan = Double.parseDouble(loan);

        UserFront open = new UserFront(accountNumb);
       
        if (selectedItem.equals("Balance")) {
            if (douBal < douloan) {
                JOptionPane.showMessageDialog(null, "Not enough Balance");
            } else {
                newBal = douBal - douloan;
                loan = AmountField.getText();
                LoanId = LoanIds.getText();
                douloan = Double.parseDouble(loan);
                Payment();
                Tables();
            }

        } else if (selectedItem.equals("Gcash")){
                loan = AmountField.getText();
                LoanId = LoanIds.getText();
                douloan = Double.parseDouble(loan);
                newBal = douBal;
                Payment();
                Tables();
                open.setVisible(true);
        }else if (selectedItem.equals("payMaya")){
                loan = AmountField.getText();
                LoanId = LoanIds.getText();
                douloan = Double.parseDouble(loan);
                newBal = douBal;
                Payment();
                Tables();
        } else {
            JOptionPane.showMessageDialog(null, "There was a error. Please try again later");
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TableLoanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableLoanMouseClicked
        if (evt.getClickCount() == 2) {
            int selected = TableLoan.getSelectedRow();
            if (selected != -1) {
                String getID = TableLoan.getValueAt(selected, 0).toString();
                String getAmount = TableLoan.getValueAt(selected, 2).toString();

                LoanId = getID;
                loan = getAmount;
                AmountField.setText(getAmount);
                LoanIds.setText(getID);
            }
        }
    }//GEN-LAST:event_TableLoanMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.out.println(accountNumb);
        UserFront open = new UserFront(accountNumb);
        open.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayLoan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AmountField;
    private javax.swing.JTextField LoanIds;
    private javax.swing.JComboBox<String> PayMode;
    private javax.swing.JTable TableLoan;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
